// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gum.proto

/*
Package gumapi is a generated protocol buffer package.

It is generated from these files:
	gum.proto

It has these top-level messages:
	ByteRange
	WriteRequest
	WriteResponse
	ReadRequest
	ReadResponse
	ListChunksRequest
	ListChunksResponse
	CreateChunkRequest
	CreateChunkResponse
*/
package gumapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ByteRange struct {
	StartByte uint64 `protobuf:"varint,1,opt,name=start_byte,json=startByte" json:"start_byte,omitempty"`
	EndByte   uint64 `protobuf:"varint,2,opt,name=end_byte,json=endByte" json:"end_byte,omitempty"`
}

func (m *ByteRange) Reset()                    { *m = ByteRange{} }
func (m *ByteRange) String() string            { return proto.CompactTextString(m) }
func (*ByteRange) ProtoMessage()               {}
func (*ByteRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ByteRange) GetStartByte() uint64 {
	if m != nil {
		return m.StartByte
	}
	return 0
}

func (m *ByteRange) GetEndByte() uint64 {
	if m != nil {
		return m.EndByte
	}
	return 0
}

type WriteRequest struct {
	ChunkHandle uint64     `protobuf:"varint,1,opt,name=chunk_handle,json=chunkHandle" json:"chunk_handle,omitempty"`
	ByteRange   *ByteRange `protobuf:"bytes,2,opt,name=byte_range,json=byteRange" json:"byte_range,omitempty"`
}

func (m *WriteRequest) Reset()                    { *m = WriteRequest{} }
func (m *WriteRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()               {}
func (*WriteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *WriteRequest) GetChunkHandle() uint64 {
	if m != nil {
		return m.ChunkHandle
	}
	return 0
}

func (m *WriteRequest) GetByteRange() *ByteRange {
	if m != nil {
		return m.ByteRange
	}
	return nil
}

type WriteResponse struct {
}

func (m *WriteResponse) Reset()                    { *m = WriteResponse{} }
func (m *WriteResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteResponse) ProtoMessage()               {}
func (*WriteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ReadRequest struct {
	ChunkHandle uint64     `protobuf:"varint,1,opt,name=chunk_handle,json=chunkHandle" json:"chunk_handle,omitempty"`
	ByteRange   *ByteRange `protobuf:"bytes,2,opt,name=byte_range,json=byteRange" json:"byte_range,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReadRequest) GetChunkHandle() uint64 {
	if m != nil {
		return m.ChunkHandle
	}
	return 0
}

func (m *ReadRequest) GetByteRange() *ByteRange {
	if m != nil {
		return m.ByteRange
	}
	return nil
}

type ReadResponse struct {
	Datum []byte `protobuf:"bytes,1,opt,name=datum,proto3" json:"datum,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReadResponse) GetDatum() []byte {
	if m != nil {
		return m.Datum
	}
	return nil
}

type ListChunksRequest struct {
}

func (m *ListChunksRequest) Reset()                    { *m = ListChunksRequest{} }
func (m *ListChunksRequest) String() string            { return proto.CompactTextString(m) }
func (*ListChunksRequest) ProtoMessage()               {}
func (*ListChunksRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ListChunksResponse struct {
	Chunks []uint64 `protobuf:"varint,1,rep,packed,name=chunks" json:"chunks,omitempty"`
}

func (m *ListChunksResponse) Reset()                    { *m = ListChunksResponse{} }
func (m *ListChunksResponse) String() string            { return proto.CompactTextString(m) }
func (*ListChunksResponse) ProtoMessage()               {}
func (*ListChunksResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ListChunksResponse) GetChunks() []uint64 {
	if m != nil {
		return m.Chunks
	}
	return nil
}

type CreateChunkRequest struct {
	ChunkHandle uint64 `protobuf:"varint,1,opt,name=chunk_handle,json=chunkHandle" json:"chunk_handle,omitempty"`
}

func (m *CreateChunkRequest) Reset()                    { *m = CreateChunkRequest{} }
func (m *CreateChunkRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateChunkRequest) ProtoMessage()               {}
func (*CreateChunkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CreateChunkRequest) GetChunkHandle() uint64 {
	if m != nil {
		return m.ChunkHandle
	}
	return 0
}

type CreateChunkResponse struct {
}

func (m *CreateChunkResponse) Reset()                    { *m = CreateChunkResponse{} }
func (m *CreateChunkResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateChunkResponse) ProtoMessage()               {}
func (*CreateChunkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*ByteRange)(nil), "gumapi.ByteRange")
	proto.RegisterType((*WriteRequest)(nil), "gumapi.WriteRequest")
	proto.RegisterType((*WriteResponse)(nil), "gumapi.WriteResponse")
	proto.RegisterType((*ReadRequest)(nil), "gumapi.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "gumapi.ReadResponse")
	proto.RegisterType((*ListChunksRequest)(nil), "gumapi.ListChunksRequest")
	proto.RegisterType((*ListChunksResponse)(nil), "gumapi.ListChunksResponse")
	proto.RegisterType((*CreateChunkRequest)(nil), "gumapi.CreateChunkRequest")
	proto.RegisterType((*CreateChunkResponse)(nil), "gumapi.CreateChunkResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ToothAPI service

type ToothAPIClient interface {
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	ListChunks(ctx context.Context, in *ListChunksRequest, opts ...grpc.CallOption) (*ListChunksResponse, error)
	CreateChunk(ctx context.Context, in *CreateChunkRequest, opts ...grpc.CallOption) (*CreateChunkResponse, error)
}

type toothAPIClient struct {
	cc *grpc.ClientConn
}

func NewToothAPIClient(cc *grpc.ClientConn) ToothAPIClient {
	return &toothAPIClient{cc}
}

func (c *toothAPIClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := grpc.Invoke(ctx, "/gumapi.ToothAPI/Write", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toothAPIClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := grpc.Invoke(ctx, "/gumapi.ToothAPI/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toothAPIClient) ListChunks(ctx context.Context, in *ListChunksRequest, opts ...grpc.CallOption) (*ListChunksResponse, error) {
	out := new(ListChunksResponse)
	err := grpc.Invoke(ctx, "/gumapi.ToothAPI/ListChunks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toothAPIClient) CreateChunk(ctx context.Context, in *CreateChunkRequest, opts ...grpc.CallOption) (*CreateChunkResponse, error) {
	out := new(CreateChunkResponse)
	err := grpc.Invoke(ctx, "/gumapi.ToothAPI/CreateChunk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ToothAPI service

type ToothAPIServer interface {
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	ListChunks(context.Context, *ListChunksRequest) (*ListChunksResponse, error)
	CreateChunk(context.Context, *CreateChunkRequest) (*CreateChunkResponse, error)
}

func RegisterToothAPIServer(s *grpc.Server, srv ToothAPIServer) {
	s.RegisterService(&_ToothAPI_serviceDesc, srv)
}

func _ToothAPI_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToothAPIServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gumapi.ToothAPI/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToothAPIServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToothAPI_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToothAPIServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gumapi.ToothAPI/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToothAPIServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToothAPI_ListChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToothAPIServer).ListChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gumapi.ToothAPI/ListChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToothAPIServer).ListChunks(ctx, req.(*ListChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToothAPI_CreateChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToothAPIServer).CreateChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gumapi.ToothAPI/CreateChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToothAPIServer).CreateChunk(ctx, req.(*CreateChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ToothAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gumapi.ToothAPI",
	HandlerType: (*ToothAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _ToothAPI_Write_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _ToothAPI_Read_Handler,
		},
		{
			MethodName: "ListChunks",
			Handler:    _ToothAPI_ListChunks_Handler,
		},
		{
			MethodName: "CreateChunk",
			Handler:    _ToothAPI_CreateChunk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gum.proto",
}

func init() { proto.RegisterFile("gum.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0xcf, 0x4f, 0xc2, 0x30,
	0x14, 0x0e, 0x08, 0xc8, 0xde, 0x66, 0x0c, 0x0f, 0x30, 0x30, 0x63, 0x82, 0x8d, 0x07, 0x0e, 0x86,
	0x28, 0x9a, 0x78, 0x56, 0xa2, 0xd1, 0xc4, 0x83, 0x69, 0x4c, 0x3c, 0x92, 0x8e, 0xbd, 0x00, 0x51,
	0x36, 0x5c, 0xbb, 0x03, 0x37, 0xff, 0x74, 0xb3, 0xb6, 0xc3, 0x21, 0x1c, 0xbc, 0x78, 0x5b, 0xbf,
	0xef, 0xf5, 0xfb, 0xf1, 0x56, 0x70, 0xa6, 0xe9, 0x62, 0xb0, 0x4c, 0x62, 0x15, 0x63, 0x6d, 0x9a,
	0x2e, 0xc4, 0x72, 0xce, 0xee, 0xc1, 0xb9, 0x5b, 0x29, 0xe2, 0x22, 0x9a, 0x12, 0x9e, 0x00, 0x48,
	0x25, 0x12, 0x35, 0x0e, 0x56, 0x8a, 0x3a, 0xa5, 0x5e, 0xa9, 0x5f, 0xe1, 0x8e, 0x46, 0xb2, 0x19,
	0xec, 0x42, 0x9d, 0xa2, 0xd0, 0x90, 0x65, 0x4d, 0xee, 0x53, 0x14, 0x66, 0x14, 0x9b, 0x80, 0xf7,
	0x96, 0xcc, 0x15, 0x71, 0xfa, 0x4c, 0x49, 0x2a, 0x3c, 0x05, 0x6f, 0x32, 0x4b, 0xa3, 0xf7, 0xf1,
	0x4c, 0x44, 0xe1, 0x47, 0xae, 0xe5, 0x6a, 0xec, 0x51, 0x43, 0x78, 0x01, 0x90, 0x29, 0x8d, 0x93,
	0xcc, 0x5a, 0xeb, 0xb9, 0xc3, 0xc6, 0xc0, 0xc4, 0x1a, 0xac, 0x33, 0x71, 0x27, 0xc8, 0x3f, 0xd9,
	0x21, 0x1c, 0x58, 0x13, 0xb9, 0x8c, 0x23, 0x49, 0x2c, 0x00, 0x97, 0x93, 0x08, 0xff, 0xd5, 0xf4,
	0x0c, 0x3c, 0xe3, 0x61, 0x3c, 0xb1, 0x05, 0xd5, 0x50, 0xa8, 0x74, 0xa1, 0xd5, 0x3d, 0x6e, 0x0e,
	0xac, 0x09, 0x8d, 0xe7, 0xb9, 0x54, 0xa3, 0xcc, 0x4a, 0xda, 0x3c, 0xec, 0x1c, 0xb0, 0x08, 0x5a,
	0x81, 0x23, 0xa8, 0xe9, 0x44, 0xb2, 0x53, 0xea, 0xed, 0xf5, 0x2b, 0xdc, 0x9e, 0xd8, 0x0d, 0xe0,
	0x28, 0x21, 0xa1, 0x48, 0xcf, 0xff, 0xbd, 0x13, 0x6b, 0x43, 0x73, 0xe3, 0xa2, 0xf1, 0x19, 0x7e,
	0x95, 0xa1, 0xfe, 0x1a, 0xc7, 0x6a, 0x76, 0xfb, 0xf2, 0x84, 0xd7, 0x50, 0xd5, 0xab, 0xc3, 0x56,
	0x5e, 0xb6, 0xf8, 0xbb, 0xfc, 0xf6, 0x2f, 0xd4, 0x46, 0xbd, 0x84, 0x4a, 0xd6, 0x1d, 0x9b, 0x39,
	0x5d, 0xd8, 0xb6, 0xdf, 0xda, 0x04, 0xed, 0x95, 0x11, 0xc0, 0x4f, 0x67, 0xec, 0xe6, 0x33, 0x5b,
	0xcb, 0xf1, 0xfd, 0x5d, 0x94, 0x15, 0x79, 0x00, 0xb7, 0xd0, 0x08, 0xd7, 0xa3, 0xdb, 0xfb, 0xf1,
	0x8f, 0x77, 0x72, 0x46, 0x27, 0xa8, 0xe9, 0xb7, 0x7e, 0xf5, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x8e,
	0x1b, 0x4e, 0x96, 0xf8, 0x02, 0x00, 0x00,
}
